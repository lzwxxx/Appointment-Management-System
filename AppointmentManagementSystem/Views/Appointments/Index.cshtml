@using AppointmentManagementSystem.Models.ArchiveState
@model IEnumerable<AppointmentManagementSystem.Models.Appointment>

@{
    ViewData["Title"] = "Appointments";
    //A local variable that gets if we are viewing the archived appointments or not
    bool isViewingArchived = ArchiveStateSingleton.Instance.IsViewingArchivedAppointments;
}

<h1>@ViewData["Title"]</h1>

<!-- Create new appointment button -->
<div class="mb-3">
    <!-- Allows for the creation of upcoming appointments
        But not archived appointments
    -->
    @if (!isViewingArchived)
    {
        <a asp-action="Create" class="btn btn-primary m-1">Create an Appointment</a>
    }
    else
    {
        <span>Create New (Disabled)</span>
    }

    <!-- Buttons for toggling between upcoming and archived appointments -->
    <p>
        <!-- On clicking a button the action is submitted to the index action method
            of the Appointments controller
        -->
        <form asp-action="Index" asp-controller="Appointments" method="post">
            <button type="submit" name="showArchived" value="false" class="btn btn-outline-warning m-1">Upcoming Appointments</button>
            <button type="submit" name="showArchived" value="true" class="btn btn-outline-info m-1">Archived Appointments</button>
        </form>
    </p>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <form asp-action="Index" asp-controller="Appointments" method="get">
                    <div class="input-group mb-3">
                        <input type="text" id="searchQuery" name="searchQuery" class="form-control" placeholder="Search by Subject or Date" aria-label="Search" aria-describedby="searchButton" value="@ViewBag.PreviousSearchQuery">
                        <button class="btn btn-success" type="submit" id="searchButton">Search</button>
                        <!-- Check if there was a previous search query -->
                        @if (!string.IsNullOrEmpty(ViewBag.PreviousSearchQuery))
                        {
                            <button class="btn btn-danger" type="button" onclick="clearSearch()">Clear Search</button>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>

    @* JavaScript function to clear the search query *@
    <script>
        function clearSearch() {
            document.getElementById('searchQuery').value = '';
            document.getElementById('searchButton').click();
        }
    </script>
</div>


<!-- Table for displaying appointments -->
<div class="table-responsive">
    <table class="table table-striped table-bordered text-center">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Date</th>
                <th>Time</th>
                <th>Subject</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Loops through all the given appointments in the views model and displays their information-->
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @{
                            // Retrieve an instance of the UserManager service
                            var userManager = Context.RequestServices.GetRequiredService<UserManager<AppUser>>();
                            // Attempt to find a user with the provided email
                            var user = await userManager.FindByEmailAsync(item.UserEmail);
                            // If a user was found display their first and last name
                            if (user != null)
                            {
                                <p>@user.FirstName @user.LastName</p>
                            }
                            else
                            {
                                <p>N/A</p>
                            }
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.AppointmentDate)</td>
                    <td>@Html.DisplayFor(modelItem => item.AppointmentTime)</td>
                    <td>@Html.DisplayFor(modelItem => item.AppointmentSubject)</td>
                    <td>
                        <!-- Edit is not displayed for archived appointments -->
                        @if (!isViewingArchived)
                        {
                            <a asp-action="Edit" asp-route-id="@item.AppointmentId" class="btn btn-success mr-1">Edit</a>
                        }
                        <!-- Admins can access the details of appointments but users can not -->
                        @if (User.IsInRole("Admin"))
                        {
                            <a asp-action="Details" asp-route-id="@item.AppointmentId" class="btn btn-info mr-1">Details</a>
                        }
                        <a asp-action="Delete" asp-route-id="@item.AppointmentId" class="btn btn-danger">Delete</a>
                    </td>

                </tr>
            }
        </tbody>
    </table>
</div>
